generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String        @id @default(uuid())
  email    String        @unique
  name     String
  password String
  workouts Workout[]
  history  WorkoutPlay[]
}

model Workout {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  name         String        @db.VarChar(255)
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  exercises    Exercise[]
  isPlayed     Boolean       @default(false)
  lastPlayedOn DateTime?
  workoutPlays WorkoutPlay[]

  @@index([userId])
}

model Exercise {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String   @db.VarChar(255)
  sets      Int
  reps      Int
  weight    Int
  workoutId String
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@index([workoutId])
}

model WorkoutPlay {
  id                String         @id @default(uuid())
  createdAt         DateTime       @default(now())
  name              String         @db.VarChar(255)
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  exercises         ExercisePlay[]
  finishedOn        DateTime?
  durationInMinutes Int            @default(0)
  workoutId         String
  workout           Workout?       @relation(fields: [workoutId], references: [id])

  @@index([userId])
  @@index([workoutId])
}

model ExercisePlay {
  id            String            @id @default(uuid())
  createdAt     DateTime          @default(now())
  name          String            @db.VarChar(255)
  order         Int               @default(0)
  reps          Int
  weight        Int
  sets          ExercisePlaySet[]
  workoutPlayId String
  workoutPlay   WorkoutPlay       @relation(fields: [workoutPlayId], references: [id], onDelete: Cascade)
  isCompleted   Boolean           @default(false)

  @@index([workoutPlayId])
}

model ExercisePlaySet {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  reps           Int
  weight         Int
  isCompleted    Boolean      @default(false)
  exercisePlayId String
  exercisePlay   ExercisePlay @relation(fields: [exercisePlayId], references: [id], onDelete: Cascade)

  @@index([exercisePlayId])
}

model PushMessageSubscription {
  id        String   @id @default(uuid())
  userId    String
  endpoint  String   @unique @db.VarChar(500)
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
}

// run npx prisma db push to update schema
// run npx prisma generate to update client
